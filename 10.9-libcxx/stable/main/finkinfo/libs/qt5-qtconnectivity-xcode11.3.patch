--- qtconnectivity-opensource-src-5.7.1/src/bluetooth/qbluetoothtransferreply_osx.mm-orig	2020-01-25 06:13:47.000000000 -0600
+++ qtconnectivity-opensource-src-5.7.1/src/bluetooth/qbluetoothtransferreply_osx.mm	2020-01-25 06:13:54.000000000 -0600
@@ -136,13 +136,13 @@
     // The OBEX session will be closed then. If
     // somehow IOBluetooth/OBEX still has a reference to our
     // session, it will not call any of delegate's callbacks.
-    if (session)
+    if (session.data())
         [session closeSession];
 }
 
 bool QBluetoothTransferReplyOSXPrivate::isActive() const
 {
-    return agent || (session && [session hasActiveRequest]);
+    return agent || (session.data() && [session hasActiveRequest]);
 }
 
 bool QBluetoothTransferReplyOSXPrivate::startOPP(const QBluetoothAddress &device)
@@ -218,7 +218,7 @@
 void QBluetoothTransferReplyOSXPrivate::sendPut()
 {
     Q_ASSERT_X(inputStream, Q_FUNC_INFO, "invalid input stream (null)");
-    Q_ASSERT_X(session, Q_FUNC_INFO, "invalid OBEX session (nil)");
+    Q_ASSERT_X(session.data(), Q_FUNC_INFO, "invalid OBEX session (nil)");
     Q_ASSERT_X([session isConnected], Q_FUNC_INFO, "not connected");
     Q_ASSERT_X(![session hasActiveRequest], Q_FUNC_INFO,
                "session already has an active request");
@@ -268,7 +268,7 @@
     Q_UNUSED(errorCode)
     Q_UNUSED(response)
 
-    if (session) {
+    if (session.data()) {
         setReplyError(QBluetoothTransferReply::SessionError,
                       QCoreApplication::translate(TRANSFER_REPLY, TR_CONNECT_FAILED));
     } else {
--- qtconnectivity-opensource-src-5.7.1/src/bluetooth/qbluetoothserviceinfo_osx.mm-orig	2020-01-25 06:14:56.000000000 -0600
+++ qtconnectivity-opensource-src-5.7.1/src/bluetooth/qbluetoothserviceinfo_osx.mm	2020-01-25 06:15:02.000000000 -0600
@@ -245,7 +245,7 @@
     if (!registered)
         return false;
 
-    Q_ASSERT_X(serviceRecord, Q_FUNC_INFO, "service registered, but serviceRecord is nil");
+    Q_ASSERT_X(serviceRecord.data(), Q_FUNC_INFO, "service registered, but serviceRecord is nil");
 
 #if QT_OSX_PLATFORM_SDK_EQUAL_OR_ABOVE(__MAC_10_9)
     if (QSysInfo::MacintoshVersion >= QSysInfo::MV_10_9) {
--- qtconnectivity-opensource-src-5.7.1/src/bluetooth/qbluetoothdevicediscoveryagent_osx.mm-orig	2020-01-25 06:15:59.000000000 -0600
+++ qtconnectivity-opensource-src-5.7.1/src/bluetooth/qbluetoothdevicediscoveryagent_osx.mm	2020-01-25 06:16:05.000000000 -0600
@@ -203,7 +203,7 @@
 
 QBluetoothDeviceDiscoveryAgentPrivate::~QBluetoothDeviceDiscoveryAgentPrivate()
 {
-    if (inquiryLE && agentState != NonActive) {
+    if (inquiryLE.data() && agentState != NonActive) {
         // We want the LE scan to stop as soon as possible.
         if (dispatch_queue_t leQueue = OSXBluetooth::qt_LE_queue()) {
             // Local variable to be retained ...
@@ -221,8 +221,8 @@
     // can fail to initialize some important data-members
     // (and the error is probably not even related to Bluetooth at all)
     // - say, allocation error - this is what meant here by valid/invalid.
-    return hostController && [hostController powerState] == kBluetoothHCIPowerStateON
-           && inquiry;
+    return hostController.data() && [hostController powerState] == kBluetoothHCIPowerStateON
+           && inquiry.data();
 }
 
 bool QBluetoothDeviceDiscoveryAgentPrivate::isActive() const
@@ -448,7 +448,7 @@
 void QBluetoothDeviceDiscoveryAgentPrivate::checkLETimeout()
 {
     Q_ASSERT_X(agentState == LEScan, Q_FUNC_INFO, "invalid agent state");
-    Q_ASSERT_X(inquiryLE, Q_FUNC_INFO, "LE device inquiry is nil");
+    Q_ASSERT_X(inquiryLE.data(), Q_FUNC_INFO, "LE device inquiry is nil");
 
     using namespace OSXBluetooth;
 
--- qtconnectivity-opensource-src-5.7.1/src/bluetooth/qbluetoothlocaldevice_osx.mm-orig	2020-01-25 06:16:39.000000000 -0600
+++ qtconnectivity-opensource-src-5.7.1/src/bluetooth/qbluetoothlocaldevice_osx.mm	2020-01-25 06:16:43.000000000 -0600
@@ -153,7 +153,7 @@
 
 bool QBluetoothLocalDevicePrivate::isValid() const
 {
-    return hostController;
+    return hostController.data();
 }
 
 void QBluetoothLocalDevicePrivate::requestPairing(const QBluetoothAddress &address, Pairing pairing)
--- qtconnectivity-opensource-src-5.7.1/src/bluetooth/osx/osxbtledeviceinquiry.mm-orig	2020-01-25 06:17:56.000000000 -0600
+++ qtconnectivity-opensource-src-5.7.1/src/bluetooth/osx/osxbtledeviceinquiry.mm	2020-01-25 06:18:01.000000000 -0600
@@ -128,7 +128,7 @@
 
 - (void)dealloc
 {
-    if (manager) {
+    if (manager.data()) {
         [manager setDelegate:nil];
         if (internalState == InquiryActive)
             [manager stopScan];
--- qtconnectivity-opensource-src-5.7.1/src/bluetooth/qbluetoothsocket_osx.mm-orig	2020-01-25 06:29:14.000000000 -0600
+++ qtconnectivity-opensource-src-5.7.1/src/bluetooth/qbluetoothsocket_osx.mm	2020-01-25 06:34:38.000000000 -0600
@@ -103,13 +103,13 @@
 
     if (socketType == QBluetoothServiceInfo::RfcommProtocol) {
         rfcommChannel.reset([[ObjCRFCOMMChannel alloc] initWithDelegate:this]);
-        if (rfcommChannel)
+        if (rfcommChannel.data())
             status = [rfcommChannel connectAsyncToDevice:address withChannelID:port];
         else
             status = kIOReturnNoMemory;
     } else if (socketType == QBluetoothServiceInfo::L2capProtocol) {
         l2capChannel.reset([[ObjCL2CAPChannel alloc] initWithDelegate:this]);
-        if (l2capChannel)
+        if (l2capChannel.data())
             status = [l2capChannel connectAsyncToDevice:address withPSM:port];
         else
             status = kIOReturnNoMemory;
@@ -183,10 +183,10 @@
 
     NSString *nsName = nil;
     if (socketType == QBluetoothServiceInfo::RfcommProtocol) {
-        if (rfcommChannel)
+        if (rfcommChannel.data())
             nsName = [rfcommChannel peerName];
     } else if (socketType == QBluetoothServiceInfo::L2capProtocol) {
-        if (l2capChannel)
+        if (l2capChannel.data())
             nsName = [l2capChannel peerName];
     }
 
@@ -200,10 +200,10 @@
 {
     BluetoothDeviceAddress addr = {};
     if (socketType == QBluetoothServiceInfo::RfcommProtocol) {
-        if (rfcommChannel)
+        if (rfcommChannel.data())
             addr = [rfcommChannel peerAddress];
     } else if (socketType == QBluetoothServiceInfo::L2capProtocol) {
-        if (l2capChannel)
+        if (l2capChannel.data())
             addr = [l2capChannel peerAddress];
     }
 
@@ -213,10 +213,10 @@
 quint16 QBluetoothSocketPrivate::peerPort() const
 {
     if (socketType == QBluetoothServiceInfo::RfcommProtocol) {
-        if (rfcommChannel)
+        if (rfcommChannel.data())
             return [rfcommChannel getChannelID];
     } else if (socketType == QBluetoothServiceInfo::L2capProtocol) {
-        if (l2capChannel)
+        if (l2capChannel.data())
             return [l2capChannel getPSM];
     }
 
@@ -233,7 +233,7 @@
     Q_ASSERT_X(socketType == QBluetoothServiceInfo::L2capProtocol
                || socketType == QBluetoothServiceInfo::RfcommProtocol,
                Q_FUNC_INFO, "invalid socket type");
-    Q_ASSERT_X(l2capChannel || rfcommChannel, Q_FUNC_INFO,
+    Q_ASSERT_X(l2capChannel.data() || rfcommChannel.data(), Q_FUNC_INFO,
                "invalid socket (no open channel)");
     Q_ASSERT_X(q_ptr, Q_FUNC_INFO, "invalid q_ptr (null)");
 
@@ -277,13 +277,13 @@
 
     openMode = QIODevice::ReadWrite;
     rfcommChannel.reset([[ObjCRFCOMMChannel alloc] initWithDelegate:this channel:channel]);
-    if (rfcommChannel) {// We do not handle errors, up to an external user.
+    if (rfcommChannel.data()) {// We do not handle errors, up to an external user.
         q_ptr->setOpenMode(QIODevice::ReadWrite);
         state = QBluetoothSocket::ConnectedState;
         socketType = QBluetoothServiceInfo::RfcommProtocol;
     }
 
-    return rfcommChannel;
+    return rfcommChannel.data();
 }
 
 bool QBluetoothSocketPrivate::setChannel(IOBluetoothL2CAPChannel *channel)
@@ -301,13 +301,13 @@
 
     openMode = QIODevice::ReadWrite;
     l2capChannel.reset([[ObjCL2CAPChannel alloc] initWithDelegate:this channel:channel]);
-    if (l2capChannel) {// We do not handle errors, up to an external user.
+    if (l2capChannel.data()) {// We do not handle errors, up to an external user.
         q_ptr->setOpenMode(QIODevice::ReadWrite);
         state = QBluetoothSocket::ConnectedState;
         socketType = QBluetoothServiceInfo::L2capProtocol;
     }
 
-    return l2capChannel;
+    return l2capChannel.data();
 }
 
 
--- qtconnectivity-opensource-src-5.7.1/src/bluetooth/qbluetoothserver_osx.mm-orig	2020-01-25 06:36:08.000000000 -0600
+++ qtconnectivity-opensource-src-5.7.1/src/bluetooth/qbluetoothserver_osx.mm	2020-01-25 06:37:30.000000000 -0600
@@ -142,7 +142,7 @@
 
 void QBluetoothServerPrivate::openNotify(IOBluetoothRFCOMMChannel *channel)
 {
-    Q_ASSERT_X(listener, Q_FUNC_INFO, "invalid listener (nil)");
+    Q_ASSERT_X(listener.data(), Q_FUNC_INFO, "invalid listener (nil)");
     Q_ASSERT_X(channel, Q_FUNC_INFO, "invalid channel (nil)");
     Q_ASSERT_X(q_ptr, Q_FUNC_INFO, "invalid q_ptr (null)");
 
@@ -154,7 +154,7 @@
 
 void QBluetoothServerPrivate::openNotify(IOBluetoothL2CAPChannel *channel)
 {
-    Q_ASSERT_X(listener, Q_FUNC_INFO, "invalid listener (nil)");
+    Q_ASSERT_X(listener.data(), Q_FUNC_INFO, "invalid listener (nil)");
     Q_ASSERT_X(channel, Q_FUNC_INFO, "invalid channel (nil)");
     Q_ASSERT_X(q_ptr, Q_FUNC_INFO, "invalid q_ptr (null)");
 
@@ -291,7 +291,7 @@
 {
     typedef QBluetoothServerPrivate::ObjCListener ObjCListener;
 
-    if (d_ptr->listener) {
+    if (d_ptr->listener.data()) {
         qCWarning(QT_BT_OSX) << Q_FUNC_INFO << "already in listen mode, "
                                 "close server first";
         return false;
--- qtconnectivity-opensource-src-5.7.1/src/bluetooth/qlowenergycontroller_osx.mm-orig	2020-01-25 06:39:25.000000000 -0600
+++ qtconnectivity-opensource-src-5.7.1/src/bluetooth/qlowenergycontroller_osx.mm	2020-01-25 06:40:02.000000000 -0600
@@ -208,7 +208,7 @@
 
 bool QLowEnergyControllerPrivateOSX::isValid() const
 {
-    return centralManager;
+    return centralManager.data();
 }
 
 void QLowEnergyControllerPrivateOSX::_q_connected()
From 6b6b4fea87b7b9063299e4b15adf307f71319cf1 Mon Sep 17 00:00:00 2001
From: Timur Pocheptsov <timur.pocheptsov@theqtcompany.com>
Date: Thu, 2 Jun 2016 12:30:54 +0200
Subject: [PATCH] QtBluetooth: remove outdate code (OS X/iOS)

Since we now have OS X 10.9 and iOS 7.0 as the minimal required
(SDK and deployment target) - get rid of outdated code-branches
in _SDK_EQUAL_OR_ABOVE etc.

Change-Id: I5f546e8bb746f6b94f26a40460b3caa0af6a531c
Reviewed-by: Alex Blasche <alexander.blasche@theqtcompany.com>
---
 src/bluetooth/osx/osxbtcentralmanager.mm   | 95 ++++------------------
 src/bluetooth/osx/osxbtdevicepair.mm       | 13 +--
 src/bluetooth/osx/osxbtledeviceinquiry.mm  | 77 ++----------------
 src/bluetooth/qbluetoothserviceinfo_osx.mm | 92 ++-------------------
 src/bluetooth/qlowenergycontroller_osx.mm  | 58 +++++--------
 5 files changed, 53 insertions(+), 282 deletions(-)

diff --git a/src/bluetooth/osx/osxbtcentralmanager.mm b/src/bluetooth/osx/osxbtcentralmanager.mm
index 3b0e098d..b4c946af 100644
--- a/src/bluetooth/osx/osxbtcentralmanager.mm
+++ b/src/bluetooth/osx/osxbtcentralmanager.mm
@@ -43,7 +43,6 @@
 #include "osxbtnotifier_p.h"
 
 #include <QtCore/qloggingcategory.h>
-#include <QtCore/qsysinfo.h>
 #include <QtCore/qdebug.h>
 
 #include <algorithm>
@@ -285,18 +259,7 @@ - (bool)isConnected
     if (!peripheral)
         return false;
 
-#if QT_MAC_PLATFORM_SDK_EQUAL_OR_ABOVE(__MAC_10_9, __IPHONE_7_0)
-    using OSXBluetooth::qt_OS_limit;
-
-    if (QSysInfo::MacintoshVersion >= qt_OS_limit(QSysInfo::MV_10_9, QSysInfo::MV_IOS_7_0))
-        return peripheral.state == CBPeripheralStateConnected;
-#endif
-    // Either SDK or the target is below 10.9/7.0 ...
-    if (![peripheral respondsToSelector:@selector(isConnected)])
-        return false;
-
-    // Ugly cast to deal with id being a pointer ...
-    return reinterpret_cast<quintptr>([peripheral performSelector:@selector(isConnected)]);
+    return peripheral.state == CBPeripheralStateConnected;
 }
 
 - (void)disconnectFromDevice
diff --git a/src/bluetooth/osx/osxbtdevicepair.mm b/src/bluetooth/osx/osxbtdevicepair.mm
index 737a312f..c9458255 100644
--- a/src/bluetooth/osx/osxbtdevicepair.mm
+++ b/src/bluetooth/osx/osxbtdevicepair.mm
@@ -41,7 +41,6 @@
 #include "osxbtutility_p.h"
 
 #include <QtCore/qloggingcategory.h>
-#include <QtCore/qsysinfo.h>
 #include <QtCore/qdebug.h>
 
 QT_BEGIN_NAMESPACE
@@ -91,18 +90,8 @@ - (id)initWithTarget:(const QBluetoothAddress &)address
 
 - (void)dealloc
 {
-#if QT_OSX_PLATFORM_SDK_EQUAL_OR_ABOVE(__MAC_10_9)
-    // Stop also sets a delegate to nil (Apple's docs).
-    // 10.9 only.
-    if (QSysInfo::MacintoshVersion >= QSysInfo::MV_10_9)
-        [m_pairing stop];
-    else
-        [m_pairing setDelegate:nil];
-#else
-    [m_pairing setDelegate:nil];
-#endif
+    [m_pairing stop];
     [m_pairing release];
-
     [super dealloc];
 }
 
diff --git a/src/bluetooth/osx/osxbtledeviceinquiry.mm b/src/bluetooth/osx/osxbtledeviceinquiry.mm
index 88370fa6..3539ccf3 100644
--- a/src/bluetooth/osx/osxbtledeviceinquiry.mm
+++ b/src/bluetooth/osx/osxbtledeviceinquiry.mm
@@ -43,7 +43,6 @@
 #include "osxbtutility_p.h"
 
 #include <QtCore/qloggingcategory.h>
-#include <QtCore/qsysinfo.h>
 #include <QtCore/qdebug.h>
 
 #include "corebluetoothwrapper_p.h"
@@ -52,8 +51,6 @@
 
 namespace OSXBluetooth {
 
-#if QT_MAC_PLATFORM_SDK_EQUAL_OR_ABOVE(__MAC_10_9, __IPHONE_6_0)
-
 QBluetoothUuid qt_uuid(NSUUID *nsUuid)
 {
     if (!nsUuid)
@@ -66,38 +63,6 @@ QBluetoothUuid qt_uuid(NSUUID *nsUuid)
     return QBluetoothUuid(qtUuidData);
 }
 
-#endif
-
-QBluetoothUuid qt_uuid(CFUUIDRef uuid)
-{
-    if (!uuid)
-        return QBluetoothUuid();
-
-    const CFUUIDBytes data = CFUUIDGetUUIDBytes(uuid);
-    quint128 qtUuidData = {{data.byte0, data.byte1, data.byte2, data.byte3,
-                           data.byte4, data.byte5, data.byte6, data.byte7,
-                           data.byte8, data.byte9, data.byte10, data.byte11,
-                           data.byte12, data.byte13, data.byte14, data.byte15}};
-
-    return QBluetoothUuid(qtUuidData);
-}
-
-typedef ObjCStrongReference<NSString> StringStrongReference;
-
-StringStrongReference uuid_as_nsstring(CFUUIDRef uuid)
-{
-    // We use the UUDI's string representation as a key in a dictionary.
-    if (!uuid)
-        return StringStrongReference();
-
-    CFStringRef cfStr = CFUUIDCreateString(kCFAllocatorDefault, uuid);
-    if (!cfStr)
-        return StringStrongReference();
-
-    // Imporant: with ARC this will require a different cast/ownership!
-    return StringStrongReference((NSString *)cfStr, false);
-}
-
 }
 
 
@@ -301,45 +266,21 @@ - (void)centralManager:(CBCentralManager *)central didDiscoverPeripheral:(CBPeri
 
     QBluetoothUuid deviceUuid;
 
-#if QT_MAC_PLATFORM_SDK_EQUAL_OR_ABOVE(__MAC_10_9, __IPHONE_7_0)
-    if (QSysInfo::MacintoshVersion >= qt_OS_limit(QSysInfo::MV_10_9, QSysInfo::MV_IOS_7_0)) {
-        if (!peripheral.identifier) {
-            qCWarning(QT_BT_OSX) << Q_FUNC_INFO << "peripheral without NSUUID";
-            return;
-        }
 
-        if ([uuids containsObject:peripheral.identifier]) {
-            // We already know this peripheral ...
-            return;
-        }
 
-        [uuids addObject:peripheral.identifier];
-        deviceUuid = OSXBluetooth::qt_uuid(peripheral.identifier);
+    if (!peripheral.identifier) {
+        qCWarning(QT_BT_OSX) << Q_FUNC_INFO << "peripheral without NSUUID";
+        return;
     }
-#endif
-    // Either SDK or the target is below 10.9/7.0:
-    // The property UUID was finally removed in iOS 9, we have
-    // to avoid compilation errors ...
-    if (deviceUuid.isNull()) {
-        CFUUIDRef cfUUID = Q_NULLPTR;
 
-        if ([peripheral respondsToSelector:@selector(UUID)]) {
-            // This will require a bridged cast if we switch to ARC ...
-            cfUUID = reinterpret_cast<CFUUIDRef>([peripheral performSelector:@selector(UUID)]);
-        }
-
-        if (!cfUUID) {
-            qCWarning(QT_BT_OSX) << Q_FUNC_INFO << "peripheral without CFUUID";
-            return;
-        }
-
-        StringStrongReference key(uuid_as_nsstring(cfUUID));
-        if ([uuids containsObject:key.data()])
-            return; // We've seen this peripheral before ...
-        [uuids addObject:key.data()];
-        deviceUuid = OSXBluetooth::qt_uuid(cfUUID);
+    if ([uuids containsObject:peripheral.identifier]) {
+        // We already know this peripheral ...
+        return;
     }
 
+    [uuids addObject:peripheral.identifier];
+    deviceUuid = OSXBluetooth::qt_uuid(peripheral.identifier);
+
     if (deviceUuid.isNull()) {
         qCWarning(QT_BT_OSX) << Q_FUNC_INFO << "no way to address peripheral, QBluetoothUuid is null";
         return;
diff --git a/src/bluetooth/qbluetoothserviceinfo_osx.mm b/src/bluetooth/qbluetoothserviceinfo_osx.mm
index f2cba6cf..c51eb1c6 100644
--- a/src/bluetooth/qbluetoothserviceinfo_osx.mm
+++ b/src/bluetooth/qbluetoothserviceinfo_osx.mm
@@ -45,7 +45,6 @@
 
 #include <QtCore/qloggingcategory.h>
 #include <QtCore/qvariant.h>
-#include <QtCore/qsysinfo.h>
 #include <QtCore/qglobal.h>
 #include <QtCore/qmutex.h>
 #include <QtCore/qmap.h>
@@ -57,44 +56,6 @@
 
 QT_BEGIN_NAMESPACE
 
-namespace {
-
-// This is not in osxbtutility_p, since it's not required
-// in general and just fixes the problem with SDK < 10.9,
-// where we have to care about about IOBluetoothSDPServiceRecordRef.
-class ServiceRecordRefGuard
-{
-public:
-    ServiceRecordRefGuard()
-        : recordRef(Q_NULLPTR)
-    {
-    }
-    explicit ServiceRecordRefGuard(IOBluetoothSDPServiceRecordRef r)
-        : recordRef(r)
-    {
-    }
-    ~ServiceRecordRefGuard()
-    {
-        if (recordRef) // Requires non-NULL pointers.
-            CFRelease(recordRef);
-    }
-
-    void reset(IOBluetoothSDPServiceRecordRef r)
-    {
-        if (recordRef)
-            CFRelease(recordRef);
-        // Take the ownership:
-        recordRef = r;
-    }
-
-private:
-    IOBluetoothSDPServiceRecordRef recordRef;
-
-    Q_DISABLE_COPY(ServiceRecordRefGuard)
-};
-
-}
-
 class QBluetoothServiceInfoPrivate
 {
 public:
@@ -149,44 +110,19 @@ void reset(IOBluetoothSDPServiceRecordRef r)
         return false;
     }
 
-    ServiceRecordRefGuard refGuard;
     SDPRecord newRecord;
-#if QT_OSX_PLATFORM_SDK_EQUAL_OR_ABOVE(__MAC_10_9)
-    if (QSysInfo::MacintoshVersion >= QSysInfo::MV_10_9) {
-        newRecord.reset([[IOBluetoothSDPServiceRecord
-                          publishedServiceRecordWithDictionary:serviceDict] retain]);
-    } else {
-#else
-    {
-#endif
-        IOBluetoothSDPServiceRecordRef recordRef = Q_NULLPTR;
-        // With ARC this will require a different cast?
-        const IOReturn status = IOBluetoothAddServiceDict((CFDictionaryRef)serviceDict.data(), &recordRef);
-        if (status != kIOReturnSuccess) {
-            qCWarning(QT_BT_OSX) << Q_FUNC_INFO << "failed to register a service record";
-            return false;
-        }
-
-        refGuard.reset(recordRef);
-        newRecord.reset([[IOBluetoothSDPServiceRecord withSDPServiceRecordRef:recordRef] retain]);
-        // It's weird, but ... it's not possible to release a record ref yet.
-    }
+    newRecord.reset([[IOBluetoothSDPServiceRecord
+                     publishedServiceRecordWithDictionary:serviceDict] retain]);
 
     if (!newRecord) {
         qCWarning(QT_BT_OSX) << Q_FUNC_INFO << "failed to register a service record";
-        // In case of SDK < 10.9 it's not possible to remove a service record ...
-        // no way to obtain record handle yet.
         return false;
     }
 
     BluetoothSDPServiceRecordHandle newRecordHandle = 0;
     if ([newRecord getServiceRecordHandle:&newRecordHandle] != kIOReturnSuccess) {
         qCWarning(QT_BT_OSX) << Q_FUNC_INFO << "failed to register a service record";
-#if QT_OSX_PLATFORM_SDK_EQUAL_OR_ABOVE(__MAC_10_9)
-        if (QSysInfo::MacintoshVersion >= QSysInfo::MV_10_9)
-            [newRecord removeServiceRecord];
-#endif
-        // With SDK < 10.9 there is no way to unregister at this point ...
+        [newRecord removeServiceRecord];
         return false;
     }
 
@@ -212,16 +148,7 @@ void reset(IOBluetoothSDPServiceRecordRef r)
     }
 
     if (!configured) {
-#if QT_OSX_PLATFORM_SDK_EQUAL_OR_ABOVE(__MAC_10_9)
-        if (QSysInfo::MacintoshVersion >= QSysInfo::MV_10_9) {
-            [newRecord removeServiceRecord];
-        } else {
-#else
-        {// Just to balance braces ...
-#endif
-            IOBluetoothRemoveServiceWithRecordHandle(newRecordHandle);
-        }
-
+        [newRecord removeServiceRecord];
         qCWarning(QT_BT_OSX) << Q_FUNC_INFO << "failed to register a service record";
         return false;
     }
@@ -248,16 +175,7 @@ void reset(IOBluetoothSDPServiceRecordRef r)
 
     Q_ASSERT_X(serviceRecord, Q_FUNC_INFO, "service registered, but serviceRecord is nil");
 
-#if QT_OSX_PLATFORM_SDK_EQUAL_OR_ABOVE(__MAC_10_9)
-    if (QSysInfo::MacintoshVersion >= QSysInfo::MV_10_9) {
-        [serviceRecord removeServiceRecord];
-    } else {
-#else
-    {
-#endif
-    // Assert on newRecordHandle? Is 0 a valid/invalid handle?
-        IOBluetoothRemoveServiceWithRecordHandle(serviceRecordHandle);
-    }
+    [serviceRecord removeServiceRecord];
 
     serviceRecord.reset(nil);
 
diff --git a/src/bluetooth/qlowenergycontroller_osx.mm b/src/bluetooth/qlowenergycontroller_osx.mm
index 97c154d7..6ab257ea 100644
--- a/src/bluetooth/qlowenergycontroller_osx.mm
+++ b/src/bluetooth/qlowenergycontroller_osx.mm
@@ -54,7 +54,6 @@
 #include <QtCore/qloggingcategory.h>
 #include <QtCore/qsharedpointer.h>
 #include <QtCore/qbytearray.h>
-#include <QtCore/qsysinfo.h>
 #include <QtCore/qglobal.h>
 #include <QtCore/qstring.h>
 #include <QtCore/qlist.h>
@@ -105,18 +104,13 @@ ServicePrivate qt_createLEService(QLowEnergyControllerPrivateOSX *controller, CB
 
     // TODO: isPrimary is ... always 'NO' - to be investigated.
     /*
-    #if QT_MAC_PLATFORM_SDK_EQUAL_OR_ABOVE(__MAC_10_9, __IPHONE_6_0)
     using OSXBluetooth::qt_OS_limit;
-    if (QSysInfo::MacintoshVersion >= qt_OS_limit(QSysInfo::MV_10_9, QSysInfo::MV_IOS_6_0)) {
-        if (!cbService.isPrimary) {
-            // Our guess included/not was probably wrong.
-            newService->type &= ~QLowEnergyService::PrimaryService;
-            newService->type |= QLowEnergyService::IncludedService;
-        }
+    if (!cbService.isPrimary) {
+        // Our guess included/not was probably wrong.
+        newService->type &= ~QLowEnergyService::PrimaryService;
+        newService->type |= QLowEnergyService::IncludedService;
     }
-    #endif
     */
-    // No such property before 10_9/6_0.
     return newService;
 }
 
