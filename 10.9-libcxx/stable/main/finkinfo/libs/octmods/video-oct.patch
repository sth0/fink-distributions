diff -Nurd video-1.0.2/src/AVHandler.cc video-1.0.2.patched/src/AVHandler.cc
--- video-1.0.2/src/AVHandler.cc	2009-05-08 09:17:36.000000000 -0400
+++ video-1.0.2.patched/src/AVHandler.cc	2020-01-08 13:17:19.000000000 -0500
@@ -64,7 +64,7 @@
 	if (av_output->pb->buf_ptr) {
 	    while (write_frame() > 0) {}
 	    av_write_trailer(av_output);
-	    if (url_fclose( av_output->pb ) < 0)
+	    if (avio_close( av_output->pb ) < 0)
 		(*out) << "AVHandler: cannot close output file" << std::endl;
 	}
 	av_free(av_output);
@@ -78,7 +78,7 @@
     }
 
     if (av_input) {
-	av_close_input_file(av_input);
+	avformat_close_input(&av_input);
     } else {
 	// close output stream
 	if (vstream) av_freep(&vstream);    
@@ -94,8 +94,8 @@
 AVHandler::setup_write() {
     av_register_all();
 
-    AVOutputFormat *avifmt;   
-    for (avifmt = first_oformat; avifmt != NULL; avifmt = avifmt->next) {
+    AVOutputFormat *avifmt = NULL;   
+    while (NULL != (avifmt = av_oformat_next(avifmt))) {
 	if (std::string(avifmt->name) == "avi") {
 	    break;
 	}
@@ -106,7 +106,7 @@
 	return -1;
     }
     
-    av_output = av_alloc_format_context();
+    av_output = avformat_alloc_context();
     if (!av_output) {
 	(*out) << "AVHandler: Memory error allocating format context" << std::endl;
 	return -1;
@@ -114,24 +114,18 @@
     
     // use AVI encoding
     av_output->oformat = avifmt;
-    av_output->oformat->audio_codec = CODEC_ID_NONE;
+    av_output->oformat->audio_codec = AV_CODEC_ID_NONE;
         
-    if (avifmt->video_codec != CODEC_ID_NONE) {
+    if (avifmt->video_codec != AV_CODEC_ID_NONE) {
 	if (add_video_stream() != 0) return -1;
     }
     
-    /* av_set_parameters is mandatory */
-    if (av_set_parameters(av_output, NULL) < 0) {
-	(*out) << "AVHandler: Error setting output format parameters" << std::endl;
-	return -1;
-    }
-
     snprintf(av_output->filename, sizeof(av_output->filename), "%s", filename.c_str());
-    snprintf(av_output->title, sizeof(av_output->title), "%s", title.c_str());
-    snprintf(av_output->author, sizeof(av_output->author), "%s", author.c_str());
-    snprintf(av_output->comment, sizeof(av_output->comment), "%s", comment.c_str());
+// FIXME:    snprintf(av_output->title, sizeof(av_output->title), "%s", title.c_str());
+// FIXME:    snprintf(av_output->author, sizeof(av_output->author), "%s", author.c_str());
+// FIXME:    snprintf(av_output->comment, sizeof(av_output->comment), "%s", comment.c_str());
     
-    if (url_fopen(&av_output->pb, filename.c_str(), URL_WRONLY) < 0) {
+    if (avio_open(&av_output->pb, filename.c_str(), AVIO_FLAG_WRITE) < 0) {
 	(*out) << "AVHandler: Could not open \"" << filename << "\" for output" << std::endl;
 	return -1;
     }
@@ -139,10 +133,16 @@
     if (init_video_codecs() != 0) return -1;
    
     frame = create_frame(vstream->codec->pix_fmt);
-    rgbframe = create_frame(PIX_FMT_RGB24);
+    rgbframe = create_frame(AV_PIX_FMT_RGB24);
     if (!frame || !rgbframe) return -1;
-    
-    av_write_header(av_output);
+
+    if (avformat_write_header(av_output, NULL) < 0)
+      {
+	(*out) << "AVHandler: Error writing headers" << std::endl;
+	return -1;
+      }
+
+    av_dict_free(&vstream->metadata);
     
     return 0;
 }
@@ -151,18 +151,18 @@
 AVHandler::setup_read() {
     av_register_all();
 
-    if (av_open_input_file(&av_input, filename.c_str(), NULL, 0, NULL) != 0) {
+    if (avformat_open_input(&av_input, filename.c_str(), NULL, NULL) != 0) {
 	(*out) << "AVHandler: Could not open \"" << filename << "\" for reading" << std::endl;
 	return -1;
     }
 
-    if (av_find_stream_info(av_input) < 0) {
+    if (avformat_find_stream_info(av_input, NULL) < 0) {
 	(*out) << "AVHandler: No stream information available" << std::endl;
 	return -1;
     }
 
     for (int i=0; i < av_input->nb_streams; i++) {
-	if (av_input->streams[i]->codec->codec_type == CODEC_TYPE_VIDEO) {
+	if (av_input->streams[i]->codec->codec_type == AVMEDIA_TYPE_VIDEO) {
 	    vstream = av_input->streams[i];
 	    break;
 	}
@@ -173,7 +173,7 @@
     }
 
     for (int i=0; i < av_input->nb_streams; i++) {
-	if (av_input->streams[i]->codec->codec_type == CODEC_TYPE_AUDIO) {
+	if (av_input->streams[i]->codec->codec_type == AVMEDIA_TYPE_AUDIO) {
 	    astream = av_input->streams[i];
 	    break;
 	}
@@ -189,10 +189,10 @@
     codec_name = codec->name;
 
     // We can handle truncated bitstreams
-    if (codec->capabilities & CODEC_CAP_TRUNCATED)
-	vstream->codec->flags |= CODEC_FLAG_TRUNCATED;
+    if (codec->capabilities & AV_CODEC_CAP_TRUNCATED)
+	vstream->codec->flags |= AV_CODEC_FLAG_TRUNCATED;
 
-    if (avcodec_open(vstream->codec, codec) < 0) {
+    if (avcodec_open2(vstream->codec, codec, NULL) < 0) {
 	(*out) << "AVHandler: Cannot open codec " << codec_name << std::endl;
 	vstream->codec->codec = NULL;
 	return -1;
@@ -204,11 +204,11 @@
     width = vstream->codec->width;
     height = vstream->codec->height;
 
-    title = av_input->title;
-    author = av_input->author;
-    comment = av_input->comment;
+// FIXME:    title = av_input->title;
+// FIXME:    author = av_input->author;
+// FIXME:    comment = av_input->comment;
 
-    rgbframe = create_frame(PIX_FMT_RGB24);
+    rgbframe = create_frame(AV_PIX_FMT_RGB24);
     if (!rgbframe) return -1;
 
     return 0;
@@ -237,28 +237,31 @@
     AVCodecContext *c = vstream->codec;
 
     if (frame && rgbframe) {
-      SwsContext *sc = sws_getContext(c->width, c->height, PIX_FMT_BGR24, 
+      SwsContext *sc = sws_getContext(c->width, c->height, AV_PIX_FMT_BGR24, 
 				      c->width, c->height, c->pix_fmt, 
 				      SWS_BICUBIC, 0, 0, 0);
       sws_scale(sc, rgbframe->data, rgbframe->linesize, 0,
 		c->height, frame->data, frame->linesize);
     }
     
-    int out_size = avcodec_encode_video(c, video_outbuf,
-					VIDEO_OUTBUF_SIZE,
-					frame);
-    if (out_size > 0) {
-	AVPacket pkt;
-	av_init_packet(&pkt);
-	
-	pkt.stream_index = vstream->index;
-	pkt.data = video_outbuf;
-	pkt.size = out_size;
-	
+    AVPacket pkt;
+    int ret, got_pkt;
+    av_init_packet(&pkt);
+    pkt.data = video_outbuf;
+    pkt.size = VIDEO_OUTBUF_SIZE;
+    if (avcodec_encode_video2(c, &pkt, frame, &got_pkt) < 0)
+      {
+	(*out) << "AVHandler: error encoding video frame" << std::endl;
+	return -1;
+      }
+
+    if (got_pkt)
+      {
+    
 	if (c->coded_frame)
 	    pkt.pts = c->coded_frame->pts;
 	if (c->coded_frame && c->coded_frame->key_frame)
-	    pkt.flags |= PKT_FLAG_KEY;
+	    pkt.flags |= AV_PKT_FLAG_KEY;
 	/// XXX FIXME XXX does this ensure that the first frame is always a key frame?
 	
 	if (av_write_frame(av_output, &pkt) != 0) {
@@ -269,7 +272,7 @@
     }
     
     frame_nr++;
-    return out_size;
+    return got_pkt ? pkt.size : 0;
 }
 
 int
@@ -296,7 +299,8 @@
        	(*out) << "AVHandler: Error seeking to " << target_timestamp << std::endl;
        	return -1;
     }
-    cc->hurry_up = 1;
+    cc->skip_frame = AVDISCARD_NONKEY;
+    frame_nr = nr;
 
     // Flush stream buffers after seek
     avcodec_flush_buffers(cc);
@@ -307,7 +311,7 @@
 	stream_time_base = (double)vstream->time_base.num / vstream->time_base.den;
     }
 
-    frame = avcodec_alloc_frame();
+    frame = av_frame_alloc();
 
     uint64_t current_timestamp = 0;
     AVPacket packet;
@@ -324,14 +328,18 @@
 		return -1;
 	    }
 
-	    if (url_feof(av_input->pb)) {
+	    if (av_input->pb->eof_reached) {
 		(*out) << "AVHandler: EOF reached" << std::endl;
 	    }
 	}
 
 	// Decode the packet into a frame
 	int frameFinished;
-	if (avcodec_decode_video(cc, frame, &frameFinished, packet.data, packet.size) < 0) {
+
+    // HACK for CorePNG to decode as normal PNG by default
+    packet.flags = AV_PKT_FLAG_KEY;
+	
+	if (avcodec_decode_video2(cc, frame, &frameFinished, &packet) < 0) {
 	    (*out) << "AVHandler: Error decoding video stream" << std::endl;
 	    av_free_packet(&packet);
 	    av_free(frame); frame = NULL;
@@ -342,10 +350,11 @@
 	    current_timestamp = (uint64_t)(vstream->cur_dts * AV_TIME_BASE * (long double)stream_time_base);
 	}
     }
-    cc->hurry_up = 0;
+    cc->skip_frame = AVDISCARD_NONKEY;
+    frame_nr = nr;
 
     SwsContext *sc = sws_getContext(cc->width, cc->height, cc->pix_fmt, 
-				    cc->width, cc->height, PIX_FMT_BGR24, 
+				    cc->width, cc->height, AV_PIX_FMT_BGR24, 
 				    SWS_BICUBIC, 0, 0, 0);
     sws_scale(sc, frame->data, frame->linesize, 0,
               cc->height, rgbframe->data, rgbframe->linesize);
@@ -361,9 +370,9 @@
     (*out) << "Supported file formats:" << std::endl;
     av_register_all();
 
-    AVOutputFormat *ofmt;
-    for (ofmt = first_oformat; ofmt != NULL; ofmt = ofmt->next) {
-	(*out) << ofmt->name << " ";
+    AVOutputFormat *ofmt = NULL;
+    while (NULL != (ofmt = av_oformat_next(ofmt))) {
+    	(*out) << ofmt->name << " ";
     }
     (*out) << std::endl << std::endl;
 }
@@ -375,8 +384,8 @@
 
     AVCodec *codec;
     for (codec = av_codec_next(0); codec != NULL; codec = av_codec_next(codec)) {
-	if ((codec->type == CODEC_TYPE_VIDEO) &&
-	    (codec->encode)) {	    
+	if ((codec->type == AVMEDIA_TYPE_VIDEO) &&
+	    (codec->encode2)) {	    
 	    (*out) << codec->name << " ";
 	}
     }
@@ -386,8 +395,9 @@
 int
 AVHandler::add_video_stream() {
     AVCodecContext *cc;
-    
-    vstream = av_new_stream(av_output, 0);
+
+    // FIXME: vstream = avformat_new_stream(av_output, av_find_default_stream_index(av_output));
+    vstream = avformat_new_stream(av_output, NULL);
     if (!vstream) {
 	(*out) << "AVHandler: error opening video output stream" << std::endl;
 	return -1;
@@ -395,8 +405,8 @@
     
     cc = vstream->codec;
 
-    cc->codec_type = CODEC_TYPE_VIDEO;
-    
+    cc->codec_type = AVMEDIA_TYPE_VIDEO;
+
     cc->bit_rate = bitrate;
     cc->width = width;
     cc->height = height;
@@ -404,7 +414,7 @@
     // XXX TODO XXX Make sure this calculation is correct //
     cc->time_base.num = 1;
     cc->time_base.den = (int)(framerate);
-    cc->pix_fmt = PIX_FMT_YUV420P;
+    cc->pix_fmt = AV_PIX_FMT_YUV420P;
 
     cc->gop_size = gop_size;
 
@@ -426,24 +436,24 @@
 	return -1;
     }
 
-    if (avcodec_open(cc, codec) < 0) {
+    if (avcodec_open2(cc, codec, NULL) < 0) {
 	(*out) << "AVHandler: cannot open codec" << std::endl;
 	cc->codec = NULL;
 	return -1;
     }
     
     // XXX FIXME XXX What is the best size for video_outbuf?
-    video_outbuf = (uint8_t *)malloc(VIDEO_OUTBUF_SIZE);
+    video_outbuf = (uint8_t *)av_malloc(VIDEO_OUTBUF_SIZE);
     
     return 0;
 }
 
 AVFrame*
-AVHandler::create_frame(PixelFormat fmt) {
+AVHandler::create_frame(AVPixelFormat fmt) {
     AVFrame *frame;
     uint8_t *frame_buf;
 
-    frame = avcodec_alloc_frame();
+    frame = av_frame_alloc();
     if (!frame) {
 	(*out) << "AVHandler: cannot allocate frame" << std::endl;
 	return NULL;
@@ -453,7 +463,7 @@
 				  vstream->codec->width,
 				  vstream->codec->height);
 
-    frame_buf = (uint8_t *)malloc(size);
+    frame_buf = (uint8_t *)av_malloc(size);
     if (!frame_buf) {
 	av_free(frame);
 	(*out) << "AVHandler: error initialising frame" << std::endl;
diff -Nurd video-1.0.2/src/AVHandler.h video-1.0.2.patched/src/AVHandler.h
--- video-1.0.2/src/AVHandler.h	2009-05-08 09:17:36.000000000 -0400
+++ video-1.0.2.patched/src/AVHandler.h	2020-01-08 13:17:19.000000000 -0500
@@ -27,8 +27,11 @@
 
 #define VIDEO_OUTBUF_SIZE 200000
 
+// FIXME: should define -D__STDC_CONSTANT_MACROS instead of the following
 #define INT64_C
+#define UINT64_C
 #define __STDC_CONSTANT_MACROS
+
 #include <errno.h>
 extern "C" {
 #if defined (HAVE_FFMPEG_AVFORMAT_H)
@@ -165,7 +168,7 @@
 
   unsigned int get_total_frames() const {
     if (vstream) {
-      return (unsigned int)((double)framerate * vstream->duration / AV_TIME_BASE);
+      return (unsigned int) vstream->nb_frames;
     } else {
       return 0;
     }
@@ -173,7 +176,7 @@
 
   unsigned int get_filesize() const {
     if (av_input) {
-      return av_input->file_size;
+      return avio_size(av_input->pb);
     } else {
       return 0;
     }
@@ -244,7 +247,7 @@
   
   int init_video_codecs();
 
-  AVFrame *create_frame(PixelFormat fmt);
+  AVFrame *create_frame(AVPixelFormat fmt);
 
 };
 
