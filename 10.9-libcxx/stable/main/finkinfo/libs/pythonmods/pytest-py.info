# -*- coding: ascii; tab-width: 4 -*-
Info4: <<
Package: pytest-py%type_pkg[python]
Version: 8.3.2
Revision: 1
Type: python (3.8 3.9 3.10)

Description: Cross-project testing tool for Python
DescDetail: <<
	py.test is a command line tool to collect, run and report about
	automated tests. It runs well on Linux, Windows and OSX and on many
	versions of Python. It is used in many projects, ranging from
	running 10 thousands of tests to a few inlined tests on a command line
	script. You can also generate a no-dependency
	py.test-equivalent standalone script that you can distribute along with
	your application.
<<
Maintainer: Daniel Johnson <daniel@daniel-johnson.org>
License: BSD
Homepage: http://pytest.org/

Source: https://files.pythonhosted.org/packages/source/p/pytest/pytest-%v.tar.gz
Source-Checksum: SHA256(c132345d12ce551242c87269de812483f5bcc87cdbb4722e48487ba194f9fdce)

Depends: <<
	attrs-py%type_pkg[python] (>= 19.2.0-1),
	exceptiongroup-py%type_pkg[python],
	(%type_pkg[python] = 37) importlib-metadata-py%type_pkg[python],
	iniconfig-py%type_pkg[python],
	packaging-py%type_pkg[python],
	pluggy-py%type_pkg[python] (>= 0.12.0-1),
	py-py%type_pkg[python] (>= 1.8.2-1),
	python%type_pkg[python],
	tomli-py%type_pkg[python] (>= 1.0.0),
	wcwidth-py%type_pkg[python]
<<
BuildDepends: <<
	bootstrap-modules-py%type_pkg[python],
	fink (>= 0.32),
	setuptools-tng-py%type_pkg[python],
	setuptools-scm-py%type_pkg[python]
<<
# need to avoid circular dep (pyexpect-pyXX:TestDepends:pytest-pyXX)
Recommends: <<
	pexpect-py%type_pkg[python]
<<

DescPackaging: <<
	Needs tox to run tests and tox needs pytest. Unfortunately, tox tries
	to download and install packages during tests which violates fink policy.
<<

PatchScript: <<
	# Not hardcoding tox.ini to use the installed binary here - tox relies on using
	# the sandboxed copy (in %b/.tox/py%type_pkg[python]/bin) from this build.
	#perl -pi.bak -e 's|(pytest)( -[-nr][38adl])|%p/bin/${1}-%type_raw[python]${2}|g;' tox.ini
	#perl -pi -e 's|(sphinx-build)( -)|%p/bin/${1}%type_raw[python]${2}|g;' tox.ini
	#perl -pi -e 's|(coverage)( -r[eu])|%p/bin/${1}-%type_raw[python]${2}|g;' tox.ini
<<	

CompileScript: <<
	PYTHONPATH=%p/share/bootstrap-modules-python%type_pkg[python] %p/bin/python%type_raw[python] -m build --wheel --no-isolation --skip-dependency-check
<<

InfoTest: <<
	# circular dependencies
	# pytest-cov required for tests
	# pygments is an optional dev-dep
	# xmlschema required for tests
		#pytest-cov-py%type_pkg[python] (>= 4.1.0),
		#pygments-py%type_pkg[python] (>= 2.7.2),
		#xmlschema-py%type_pkg[python]
	TestDepends: <<
		argcomplete-py%type_pkg[python],
		coverage-py%type_pkg[python],
		hypothesis-py%type_pkg[python] (>= 3.56.0-1),
		mock-py%type_pkg[python],
		nose-py%type_pkg[python]
	<<
	TestScript: <<
		#!/bin/bash -ev
		# need pytest-cov for tests, but pytest-cov needs pytest. Avoid circular deps by only running if pytest-cov is already present (and correct version)
		if [[ $(%p/bin/python%type_raw[python] -c "import pytest_cov; print(pytest_cov.__version__)" | cut -f 1 -d .) -ge "4" ]]; then
			echo "good pytest-cov present. Will run tests."
		else
			echo "pytest-cov missing or too old. Will not run tests" ||:
			exit 0
		fi
		# need xmlschema for tests
		if [[ $(%p/bin/python%type_raw[python] -c "import xmlschema; print(xmlschema.__version__)" | cut -f 1 -d .) -ge "2" ]]; then
			echo "good xmlschema present. Will run tests."
		else
			echo "xmlschema missing or too old. Will not run tests" ||:
			exit 0
		fi
		# install the wheel to a temp location, then use that to run tests
		PYTHONPATH=%p/share/bootstrap-modules-python%type_pkg[python] %p/bin/python%type_raw[python] -m installer --destdir %b/testdist dist/*.whl
		# testing/test_debugging.py: test_pdb_* connection failures
		# testing/io/test_terminalwriter.py::test_code_highlight: gh:pytest-dev/pytest/#10503
		# testing/test_terminal.py: gh:pytest-dev/pytest/#10503
		# testing/test_helpconfig.py::test_version_verbose: needs current pytest to be installed
		# testing/test_junitxml.py::test_random_report_log_xdist: gh:pytest-dev/pytest/#10443
		# testing/test_junitxml.py::test_runs_twice_xdist: gh:pytest-dev/pytest/#10443
		PYTHONPATH=%b/testdist/%p/lib/python%type_raw[python]/site-packages:%p/lib/python%type_raw[python]/site-packages %b/testdist/%p/bin/pytest -vv -k "not (testing/test_debugging.py or test_code_highlight or testing/test_terminal.py or test_version_verbose or test_random_report_log_xdist or test_runs_twice_xdist)" || exit 2
	<<
<<

InstallScript: <<
	# Clean up the droppings from tests
	/usr/bin/find . -name '*.py[co]' -delete

	PYTHONPATH=%p/share/bootstrap-modules-python%type_pkg[python] %p/bin/python%type_raw[python] -m installer --destdir %d dist/*.whl
	mv %i/bin/py.test %i/bin/py.test-%type_raw[python]
	mv %i/bin/pytest %i/bin/pytest-%type_raw[python]
<<

PostInstScript: <<
	update-alternatives --install %p/bin/py.test py.test %p/bin/py.test-%type_raw[python] %type_pkg[python] --slave %p/bin/pytest pytest %p/bin/pytest-%type_raw[python]
#	echo ''
#	echo 'If you have just built and installed the pytest dependencies'
#	echo 'atomicwrites-py%type_pkg[python], invoke-py%type_pkg[python], py-py%type_pkg[python], setuptools-scm-py%type_pkg[python]'
#	echo 'for the first time, they will have been built with their tests disabled.'
#	echo 'You may now test their builds using the `fink -m rebuild` command.'
<<

PreRmScript: <<
	if [ $1 != "upgrade" ]; then
		update-alternatives --remove py.test %p/bin/py.test-%type_raw[python]
	fi
<<

DocFiles: AUTHORS CHANGELOG* CONTRIBUTING* LICENSE README* doc
# Info4
<<
